"use client";

import { useState, useEffect } from "react";
import { motion } from "framer-motion";
import { Card, CardBody, Button, Select, SelectItem } from "@heroui/react";
import { ArrowLeft, Plus } from "lucide-react";
import { addToast } from "@heroui/toast";
import { useRouter } from "next/navigation";

import { createCertificate, updateCertificate, getCertificate } from "@/app/actions/certificate";
import { getStudents } from "@/app/actions/student";
import { getCourses } from "@/app/actions/course";
import { Input } from "@/components/ui/InputWithEffect";
import { Label } from "@/components/ui/LabelWithEffect";
import { cn } from "@/lib/utils";

type CertificateFormProps = {
  certificateId?: string;
  mode: "create" | "edit";
};

type FormData = {
  studentId: string;
  courseId: string;
  issueDate: string;
  expiryDate?: string;
  status: "ACTIVE" | "REVOKED" | "EXPIRED";
};

export default function CertificateForm({ certificateId, mode }: CertificateFormProps) {
  const router = useRouter();
  const [formData, setFormData] = useState<FormData>({
    studentId: "",
    courseId: "",
    issueDate: new Date().toISOString().split("T")[0],
    expiryDate: "",
    status: "ACTIVE",
  });
  const [loading, setLoading] = useState(false);
  const [students, setStudents] = useState<Array<{ _id: string; name: string; email: string }>>([]);
  const [courses, setCourses] = useState<Array<{ _id: string; title: string }>>([]);

  useEffect(() => {
    fetchStudentsAndCourses();
    if (mode === "edit" && certificateId) {
      fetchCertificate();
    }
  }, [certificateId, mode]);

  const fetchStudentsAndCourses = async () => {
    try {
      const [studentsResponse, coursesResponse] = await Promise.all([
        getStudents({ limit: 100 }),
        getCourses({ limit: 100 }),
      ]);

      if (studentsResponse.success) {
        setStudents(studentsResponse.students);
      }
      if (coursesResponse.success) {
        setCourses(coursesResponse.courses);
      }
    } catch (error: any) {
      addToast({
        title: "Failed to fetch students or courses",
        color: "danger",
      });
    }
  };

  const fetchCertificate = async () => {
    try {
      const response = await getCertificate(certificateId!);
      if (response.success && response.data) {
        const certificate = response.data as any; // Type assertion since we know the shape
        setFormData({
          studentId: certificate.studentId._id,
          courseId: certificate.courseId._id,
          issueDate: new Date(certificate.issueDate).toISOString().split("T")[0],
          expiryDate: certificate.expiryDate
            ? new Date(certificate.expiryDate).toISOString().split("T")[0]
            : "",
          status: certificate.status,
        });
      }
    } catch (error: any) {
      addToast({
        title: "Failed to fetch certificate",
        color: "danger",
      });
      router.push("/admin/certificates");
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    try {
      const response =
        mode === "create"
          ? await createCertificate({
              ...formData,
              certificateCode: "", // This will be generated by the server
              qrCode: "", // This will be generated by the server
            })
          : await updateCertificate(certificateId!, formData);

      if (response.success) {
        addToast({
          title: `Certificate ${mode === "create" ? "created" : "updated"} successfully`,
          color: "success",
        });
        router.push("/admin/certificates");
      } else {
        addToast({
          title: response.error || `Failed to ${mode} certificate`,
          color: "danger",
        });
      }
    } catch (error: any) {
      addToast({
        title: error.message || `Failed to ${mode} certificate`,
        color: "danger",
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      <motion.div
        animate={{ opacity: 1, y: 0 }}
        className="flex items-center gap-4"
        initial={{ opacity: 0, y: 20 }}
        transition={{ duration: 0.5 }}
      >
        <Button
          isIconOnly
          variant="light"
          onPress={() => router.back()}
        >
          <ArrowLeft className="w-4 h-4" />
        </Button>
        <div>
          <h1 className="text-2xl font-bold bg-gradient-to-r from-emerald-500 via-blue-500 to-cyan-500 bg-clip-text text-transparent">
            {mode === "create" ? "Issue New Certificate" : "Edit Certificate"}
          </h1>
          <p className="text-default-500">
            {mode === "create"
              ? "Create a new certificate for a student"
              : "Update certificate information"}
          </p>
        </div>
      </motion.div>

      <form onSubmit={handleSubmit} className="space-y-6">
        <Card className="mx-auto w-full max-w-4xl rounded-2xl border border-white/10 bg-white/10 p-8 shadow-2xl backdrop-blur-xl dark:bg-black/10 hover:border-blue-500/50 hover:animate-neon-pulse dark:hover:border-blue-400/50">
          <CardBody className="gap-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="flex flex-col gap-2">
                <Label htmlFor="studentId">Student</Label>
                <Select
                  required
                  id="studentId"
                  selectedKeys={[formData.studentId]}
                  onChange={(e) =>
                    setFormData({ ...formData, studentId: e.target.value })
                  }
                >
                  {students.map((student) => (
                    <SelectItem key={student._id}>
                      {student.name} ({student.email})
                    </SelectItem>
                  ))}
                </Select>
              </div>

              <div className="flex flex-col gap-2">
                <Label htmlFor="courseId">Course</Label>
                <Select
                  required
                  id="courseId"
                  selectedKeys={[formData.courseId]}
                  onChange={(e) =>
                    setFormData({ ...formData, courseId: e.target.value })
                  }
                >
                  {courses.map((course) => (
                    <SelectItem key={course._id}>
                      {course.title}
                    </SelectItem>
                  ))}
                </Select>
              </div>

              <div className="flex flex-col gap-2">
                <Label htmlFor="issueDate">Issue Date</Label>
                <Input
                  required
                  type="date"
                  id="issueDate"
                  value={formData.issueDate}
                  onChange={(e) =>
                    setFormData({ ...formData, issueDate: e.target.value })
                  }
                />
              </div>

              <div className="flex flex-col gap-2">
                <Label htmlFor="expiryDate">Expiry Date (Optional)</Label>
                <Input
                  type="date"
                  id="expiryDate"
                  value={formData.expiryDate}
                  onChange={(e) =>
                    setFormData({ ...formData, expiryDate: e.target.value })
                  }
                />
              </div>

              {mode === "edit" && (
                <div className="flex flex-col gap-2">
                  <Label htmlFor="status">Status</Label>
                  <Select
                    required
                    id="status"
                    selectedKeys={[formData.status]}
                    onChange={(e) =>
                      setFormData({
                        ...formData,
                        status: e.target.value as "ACTIVE" | "REVOKED" | "EXPIRED",
                      })
                    }
                  >
                    <SelectItem key="ACTIVE">Active</SelectItem>
                    <SelectItem key="REVOKED">Revoked</SelectItem>
                    <SelectItem key="EXPIRED">Expired</SelectItem>
                  </Select>
                </div>
              )}
            </div>
          </CardBody>
        </Card>

        <div className="flex justify-end gap-4">
          <Button
            isDisabled={loading}
            variant="flat"
            onPress={() => router.back()}
          >
            Cancel
          </Button>
          <Button
            color="primary"
            isLoading={loading}
            startContent={!loading && <Plus className="w-4 h-4" />}
            type="submit"
          >
            {mode === "create" ? "Issue Certificate" : "Update Certificate"}
          </Button>
        </div>
      </form>
    </div>
  );
} 